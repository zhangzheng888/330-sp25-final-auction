const leagueDAO = require('../daos/league.dao.js');
const AppError = require('../utils/app.error.js');

/**
 * Creates a new league.
 * The user making the request will be set as the commissioner.
 */
exports.createLeague = async (req, res, next) => {
    try {
        const {
            leagueName,
            teamSize,
            playerBudget,
            // rosterSettings, // Add later if needed
        } = req.body;

        if (!leagueName || !teamSize || !playerBudget) {
            return next(new AppError('League name, team size, and player budget are required.', 400));
        }

        // Assuming user ID is available from auth middleware (e.g., req.user.id)
        if (!req.user || !req.user.id) {
            return next(new AppError('User authentication required to create a league.', 401));
        }
        const commissionerId = req.user.id;

        const leagueData = {
            leagueName,
            commissionerId,
            teamSize,
            playerBudget,
            // rosterSettings,
            // leagueCode will be auto-generated by the model
        };

        const newLeague = await leagueDAO.createLeague(leagueData);

        // Optionally, update the user's role to 'commissioner' if they weren't already
        // This might involve a call to a userDAO.updateUserRole function
        // For now, assume user role management is handled elsewhere or not strictly tied to league creation here.

        res.status(201).json({
            status: 'success',
            data: {
                league: newLeague,
            },
        });
    } catch (error) {
        if (error.code === 11000) { // Duplicate key error (e.g. if league code wasn't unique, though it's auto-generated)
            return next(new AppError('A league with a similar unique identifier might already exist.', 409));
        }
        next(error);
    }
};

/**
 * Deletes a league.
 * Only the commissioner of the league (or a superadmin) can delete it.
 */
exports.deleteLeague = async (req, res, next) => {
    try {
        const { leagueId } = req.params;

        if (!req.user || !req.user.id) {
            return next(new AppError('User authentication required.', 401));
        }
        const userId = req.user.id;
        // const userRole = req.user.role; // If superadmin can also delete

        const league = await leagueDAO.findLeagueById(leagueId);

        if (!league) {
            return next(new AppError('No league found with that ID.', 404));
        }

        // Authorization check is primarily in DAO, but can be double-checked here
        // if (userRole !== 'superadmin' && league.commissionerId.toString() !== userId.toString()) {
        // return next(new AppError('You do not have permission to delete this league.', 403));
        // }

        const deletedLeague = await leagueDAO.deleteLeagueById(leagueId, userId);

        if (!deletedLeague) {
            // This case might be redundant if findLeagueById already checked, 
            // or if deleteLeagueById throws an auth error handled by the catch block.
            return next(new AppError('Failed to delete league or league not found.', 404));
        }

        res.status(204).json({
            status: 'success',
            data: null,
        });
    } catch (error) {
        if (error.statusCode === 403) { // Forbidden error from DAO
            return next(new AppError(error.message, 403));
        }
        next(error);
    }
};

// TODO: Add other league controller methods (getLeague, getAllLeagues, updateLeague) 