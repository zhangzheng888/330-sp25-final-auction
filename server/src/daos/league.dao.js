const League = require('../models/league.model.js');
const mongoose = require('mongoose');
const AppError = require('../utils/app.error.js');

/**
 * Creates a new league in the database.
 * @param {object} leagueData - Object containing league details (leagueName, commissionerId, teamSize, playerBudget, etc.).
 * @returns {Promise<League>} The created league document.
 */
async function createLeague(leagueData) {
    // leagueCode is auto-generated by pre-save hook in League model
    const league = new League(leagueData);
    return league.save();
}

/**
 * Finds all leagues.
 * @param {object} queryOptions - Options for filtering, sorting, pagination (to be implemented later).
 * @returns {Promise<Array<League>>} A list of league documents.
 */
async function findAllLeagues(queryOptions = {}) {
    // Basic implementation for now, can be extended with queryOptions
    return League.find(queryOptions);
}

/**
 * Finds a league by its ID.
 * @param {string} leagueId - The ID of the league.
 * @returns {Promise<League|null>} The league document or null if not found.
 */
async function findLeagueById(leagueId) {
    if (!mongoose.Types.ObjectId.isValid(leagueId)) {
        return null; // Or throw an error, depending on desired handling
    }
    return League.findById(leagueId);
}

/**
 * Updates a league by its ID.
 * @param {string} leagueId - The ID of the league to update.
 * @param {object} updateData - An object containing the fields to update.
 * @returns {Promise<League|null>} The updated league document or null if not found.
 */
async function updateLeagueById(leagueId, updateData) {
    if (!mongoose.Types.ObjectId.isValid(leagueId)) {
        return null;
    }
    return League.findByIdAndUpdate(leagueId, updateData, {
        new: true, // Return the modified document rather than the original
        runValidators: true // Ensure that updates adhere to schema validations
    });
}

/**
 * Deletes a league by its ID.
 * @param {string} leagueId - The ID of the league to delete.
 * @returns {Promise<League|null>} The deleted league document or null if not found.
 */
async function deleteLeagueById(leagueId) {
    if (!mongoose.Types.ObjectId.isValid(leagueId)) {
        return null;
    }
    // Authorization logic (e.g., checking commissionerId or superadmin role)
    // should be handled in the controller or middleware layer before calling this DAO function.
    return League.findByIdAndDelete(leagueId);
}

/**
 * Finds a league by its unique league code.
 * This was previously in userDAO, moving it here as it's league-specific.
 * @param {string} leagueCode - The unique code of the league.
 * @returns {Promise<League|null>} The league document or null if not found.
 */
async function findLeagueByCode(leagueCode) {
    return League.findOne({ leagueCode });
}

module.exports = {
    createLeague,
    findAllLeagues,
    findLeagueById,
    updateLeagueById,
    deleteLeagueById,
    findLeagueByCode,
}; 