const League = require('../models/league.model.js');
const mongoose = require('mongoose');
const AppError = require('../utils/app.error.js');

/**
 * Creates a new league in the database.
 * @param {object} leagueData - Object containing league details (leagueName, commissionerId, teamSize, playerBudget, etc.).
 * @returns {Promise<League>} The created league document.
 */
async function createLeague(leagueData) {
    // leagueCode is auto-generated by pre-save hook in League model
    const league = new League(leagueData);
    return league.save();
}

/**
 * Finds a league by its ID.
 * @param {string} leagueId - The ID of the league.
 * @returns {Promise<League|null>} The league document or null if not found.
 */
async function findLeagueById(leagueId) {
    if (!mongoose.Types.ObjectId.isValid(leagueId)) {
        return null; // Or throw an error, depending on desired handling
    }
    return League.findById(leagueId);
}

/**
 * Deletes a league by its ID.
 * @param {string} leagueId - The ID of the league to delete.
 * @param {string} userId - The ID of the user attempting the deletion (for authorization).
 * @returns {Promise<League|null>} The deleted league document or null if not found or not authorized.
 */
async function deleteLeagueById(leagueId, userId) {
    if (!mongoose.Types.ObjectId.isValid(leagueId)) {
        return null;
    }
    const league = await League.findById(leagueId);
    if (!league) {
        return null; // League not found
    }

    // Authorization: Only the commissioner can delete the league.
    // Superadmin role check could be added here or in the controller.
    if (league.commissionerId.toString() !== userId.toString()) {
        const error = new Error('User not authorized to delete this league.');
        error.statusCode = 403; // Forbidden
        throw error;
    }

    return League.findByIdAndDelete(leagueId);
}

/**
 * Finds a league by its unique league code.
 * This was previously in userDAO, moving it here as it's league-specific.
 * @param {string} leagueCode - The unique code of the league.
 * @returns {Promise<League|null>} The league document or null if not found.
 */
async function findLeagueByCode(leagueCode) {
    return League.findOne({ leagueCode });
}

module.exports = {
    createLeague,
    findLeagueById,
    deleteLeagueById,
    findLeagueByCode,
}; 